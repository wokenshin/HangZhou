
test:https://blog.csdn.net/qq_30657563/article/details/112095422
java语法快速回顾：https://www.runoob.com/java/java-array.html

iTerm2隐藏终端用户名和计算机名
我用的是 oh my zsh主题，打开主题文件目录
第一步：cd ~/.oh-my-zsh/themes
第二步：修改自己所使用的那个主题最后的内容，将prompt_context注释掉
第三步：source ~/.zshrc
以上from：https://www.cnblogs.com/iPing9/p/13298090.html


暗黑模式：https://blog.csdn.net/LOLITA0164/article/details/105794708?spm=1001.2014.3001.5501
RAC的两篇文章：https://blog.csdn.net/LOLITA0164/article/details/101052997?spm=1001.2014.3001.5501【基础篇】
             https://blog.csdn.net/LOLITA0164/article/details/101053158?spm=1001.2014.3001.5501【进阶】

https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md
pip 报错 https://blog.csdn.net/lzRush/article/details/114213053
美团点评(技术分享)：https://tech.meituan.com/

https://www.jianshu.com/p/ff79a5ae0353
cocoapods简单介绍「简书」：https://www.jianshu.com/p/83baebf049b8 「掘金」：https://juejin.cn/post/6908309516396265486


2021.2.15：简单使用---ReactiveCocoa（RAC）、使用第三方库(MLeaksFinder),简单排查内存泄漏的问题
2021.2.14：简单使用---Masonry
2021.2.13：简单使用---YYModel
2021.2.11：简单实现---国际化

推荐使用这里的 【.gitignore】文件作为模板

tmpFile:
1. 对于方法的入参说法错误的是B
A. 参数不能是final类型的
B. 引用类型的参数可以修改和set值
C. 不要把方法的入参当做工作变量
D. 不要把方法的入参当做临时变量
2. 关于线程同步说法错误的是哪个B
A. 禁止将系统内部使用的锁对象暴露给不可信代码
B. 禁止使用Thread.stop()来终止线程
C. 禁止使用一个实例锁来同步共享静态数据
D. 禁止使用不正确形式的双重锁定检查
3. 哪个不属于常见的管道流？A
A. PipedStream
B. PipedWriter
C. PipedReader
D. PipedOutputStream
4. 下面关于变量声明的编码规范描述, 正确的是:A
A. 变量被声明在接近它们首次使用的行
B. 变量应该在方法开始的地方集中声明
C. 局部变量使用前不需要先初始化
D. 上面描述都是错的
5. 下面使用断言的代码片段说法正确的是D
private List names = new ArrayList();

// other code
void process(int index) {
    boolean nullsRemoved = names.remove(null);
    assert nullsRemoved; 
    // ...
}
A. 此段代码会导致与预期不符的结果
B. 应该将names中删除null元素的操作移除到断言语句之内
C. 如果禁用了断言names的删除操作无法被正常执行
D. 此段代码正确使用了断言，即使禁用断言也能保证该操作被正常执行
6. 下列哪个符合类，枚举，接口命名规范？
A. XmlService
B. marcoPolo
C. XMLService
D. info
8. 那个不是推荐的加密算法
A. ECDSA
B. SHA1
C. RSA
D. AES
9. 以下哪种方式能够预防XML注入漏洞攻击：
A. XML Schema校验
B. DTD校验
C. 白名单校验
D. 格式化字符串
10. 在哪个情况下，需要使用SSLSocket套接字
A. 套接字上传输的数据不敏感
B. 数据虽然敏感，但是已经过恰当加密
C. 套接字的网络路径从来不越出信任边界
D. 不安全的传输通道中传输敏感数据
11. 一个具有1025个结点的二叉树的高h为多少
A. 11.0
B. 10.0
C. 10至1024之间
D. 11至1025之间
12. 使用TransformerFactory转换XML格式数据的时候，添加安全策略对xslt内置黑名单的方法是：
1）
TransformerFactory tf = TransformerFactory.newInstance();
tf.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", true);
2）
TransformerFactory tf = TransformerFactory.newInstance();
tf.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", false);
3）
TransformerFactory tf = TransformerFactory.newInstance();
tf.setFeature("http://xml.org/sax/features/external-general-entities", false);
4）
TransformerFactory tf = TransformerFactory.newInstance();
tf.setFeature("http://xml.org/sax/features/external-general-entities", true);
A. 1)
B. 2)
C. 3)
D. 4)
13. 以下代码的深度是多少
static byte[] parseControls(Control[] controls) throws NamingException {
    byte[] cookie = null;

    if (controls != null) {
        for (int i = 0; i < controls.length; i++) {
            if (controls[i] instanceof PagedResultsResponseControl) {
                 PagedResultsResponseControl prrc =    (PagedResultsResponseControl) controls[i];
                 cookie = prrc.getCookie();
                 System.out.println(">>Next Page \n");
             }
        }
    }

     return (cookie == null) ? new byte[0] : cookie;
}
A. 3
B. 4
C. 5
D. 6
14. 关于递归的说法错误的是哪个
A. 递归算法的执行过程分递推和回归两个阶段
B. 用递归思想写出的程序往往晦涩难懂
C. 递归调用容易造成堆栈溢出
D. 递归就是一种程序调用本身的编程技巧
15. 通常一个方法的代码行不超过多少行
A. 60
B. 80
C. 50
D. 100
16. 字节流和字符流的read()方法为什么返回的值是什么类型？
A. int
B. char
C. byte
D. boolean
17. 在除法运算中，以下说法正确的是（） B
代码1：
long num1, num2, result;
/* Initialize num1 and num2 */
result = num1 / num2;

代码2：
long num1, num2, result;
/* Initialize num1 and num2 */
if (num2 == 0) {
    // Handle error
}
else {
    result = num1 / num2;
}
A. 代码1正确
B. 代码2正确
C. 以上均不正确
D. 以上都正确
18. 推荐的防御SQL注入的最佳方式是 C
A. 限制外部输入的长度
B. 使用存储过程
C. 使用参数化查询
D. 对外部输入进行转义
19. 关于变量声明，描述正确的是（）D
A. 为方便使用，可以将需要使用的变量在方法入口处批量声明。
B. 为方便使用可以在一行声明多个变量，如String a,b;
C. 可按如下方式声明一个数组：String array[] = {"aaa", "bbb", "ccc"};
D. for 循环标题中可以接受多个变量声明
多选题
21. 下列哪些可能会产生不可信数据 ABD
A. 环境变量
B. 用户输入（包括命令行、界面）
C. 进程间通信（包括管道、消息、共享内存、socket等、RPC）
D. 网络
22. 在JDK中，哪些类是用来实现Java反射机制的？ABCD
A. Class类
B. Field类
C. Constructor类
D. Array类
23. 关于下面的代码片段说法正确的有ABC
class Super {
    protected void doLogic() { 
        System.out.println("Super invoked");
    }
}

public class Sub extends Super {
    public void doLogic() { 
        System.out.println("Sub invoked");
       // Do sensitive operations
    }
}
A. 子类Sub覆写了基类的doLogic()方法，并增加了方法的可访问性
B. 因为基类Super定义的doLogic()方法为protected的，这允许子类Sub定义该方法为public的，从而增加了doLogic()的访问性
C. 任何Sub的使用者都可以调用此方法
D. 子类覆写的基类doLogic()方法与基类保持一致为protected，防止增加被覆写的方法的可访问性
24. 以下关于运算和表达式说法正确的有B
A. 不要写超过3个的复杂条件表达式
B. 用括号明确表达式的操作顺序，避免过分依赖默认优先级
C. 在条件表达式?:的第2和第3个操作数使用同样的类型
D. 表达式的比较，应当遵循左侧倾向于变化、右侧倾向 于不变的原则
25. 使用java.util.zip.ZipInputStream中解压文件时，有哪些安全问题需要注意AB
A. 解压出的标准化路径文件在解压目标目录之外
B. 解压的文件消耗过多的系统资源
C. 解压的文件过大
D. 解压的文件类型不符合要求
26. 采用Java1.5提供新并发工具代替wait和notify，但原来wait和notify写的老代码无功能问题，可以保留R
正确
错误
27. 禁止解析DTDs属性可以解决有效防止的XML外部实体攻击
正确
错误
28. Java的IO是面向流（Stream）的，NIO是面向块（buffer）的。R
正确
错误
29. 避免随意进行类型强制转换，应改善设计，或在转换前用instanceof进行判断R
正确
错误
30. 进行IO类操作时，在finally里关闭资源优于在try-with-resource里关闭资源R
正确
错误
31. 在将一个数组对象复制成另外一个数组对象时，不要自己使用循环复制，可以使用JAVA提供的System.arraycopy()功能来复制数据对象，这样做可以避免出错，而且效率会更高R
正确
错误
32. 线程池不应该使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式更加明确线程池的运行规则，规避资源耗尽的风险R
正确
错误
33. 调用Buffer的duplicate()新建的buffer应该以只读视图或者拷贝的方式返回。R
正确
错误
34. 一般来说，在多线程场景下，如果使用锁，为了提升性能，不需要读和写都加锁，写线程需要加锁，而读的线程可以不加
锁
正确
错误
35.进行安全类数据交互时可以使用Socket来代替SSLSocket
F
正确
错误
36. 一般来说，递归需要有边界条件、递归前进段和递归前往段。当边界条件不满脚时，递归前往;当边界条件满脚时，递归前进。R
正确
错误
37. 在预知集合容量范围时，最好指定其初始化容量，比如ArrayList、StringBuilder
正确
错误
38. 使用实例或表达式调用静态方法，而不要使用类名来调用F
正确
错误
39. 对于从流中读取一个字符或字节的方法，使用char类型的返回值F
正确
错误
40. 日志工具Logger类的实例应声明为private static final R
正确
错误
41. 可以使用集合的toArray()方法将集合转为数组, 有更好的性能，代码更加简洁R
正确
错误
42. 序列化对象中的HashMap、HashSet或HashTable等集合可以包含对象自身的引用F
正确
错误
43. long y= Math.abs(Integer.MIN_VALUE); 可以避免整型溢出
正确
错误
44. Java代码中建议尽量使用带有缓冲功能的实现来进行IO操作。 对于性能要求更高的实现，可以使用Java NIO R
正确
错误
45. 在接口定义中，方法已缺省具有public abstract修饰词,因此在代码中不要再次提供这些修饰词。R
正确
错误

60分







